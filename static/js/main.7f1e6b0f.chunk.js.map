{"version":3,"sources":["algos/bubbleSort.ts","algos/insertionSort.ts","algos/mergeSort.ts","algos/quickSort.ts","algos/selectionSort.ts","App.tsx","index.tsx"],"names":["swap","arr","i","j","temp","bubbleSortOrder","array","array2","slice","order","length","push","insertionSort","halfArr","left","right","mid","Math","floor","merge","newArr","mergeSortAlgo","quickSort","first","last","pivot","random","pivoti","partition","pivotElem","quickSortAlgo","newArray","selectionSort","App","useState","setArray","selectedAlgorithm","setSelectedAlgorithm","setLength","sorting","setSorting","setCompleted","speed","setSpeed","comparedEls","setComparedEls","swapEls","setSwapEls","sortedIndex","setSortedIndex","genArray","useEffect","className","htmlFor","type","min","max","value","onChange","event","parseInt","target","id","disabled","onClick","sortArr","loop","setTimeout","k","index","prevState","map","block","bg","includes","style","backgroundColor","color","height","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f1e6b0f.chunk.js","sourcesContent":["const swap = (arr: number[], i: number, j: number): void => {\r\n\tconst temp: number = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst bubbleSortOrder = (array: number[]): number[] => {\r\n\tconst array2: number[] = array.slice();\r\n\tconst order: any = [];\r\n\r\n\tlet i: number | null, j: number | null;\r\n\r\n\tfor (i = 0; i < array2.length; i++) {\r\n\t\tfor (j = 0; j < array2.length - i - 1; j++) {\r\n\t\t\torder.push([j, j + 1, null, null]);\r\n\t\t\tif (array2[j] > array2[j + 1]) {\r\n\t\t\t\tswap(array2, j, j + 1);\r\n\t\t\t\torder.push([j, j + 1, array2.slice(), null]);\r\n\t\t\t}\r\n\t\t}\r\n\t\torder.push([null, null, null, j]);\r\n\t}\r\n\r\n\treturn order;\r\n\t// console.log(order);\r\n};\r\n\r\nexport default bubbleSortOrder;\r\n","const swap = (arr: number[], i: number, j: number): void => {\r\n\tconst temp: number = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst insertionSort = (array: number[]): any[] => {\r\n\tconst array2: number[] = array.slice();\r\n\tconst order: any[] = [];\r\n\r\n\tlet j: number;\r\n\r\n\tfor (let i = 0; i < array2.length; i++) {\r\n\t\tj = i - 1;\r\n\r\n\t\twhile (j >= 0 && array2[j] > array2[j + 1]) {\r\n\t\t\tswap(array2, j, j + 1);\r\n\t\t\torder.push([j, j + 1, null, null]);\r\n\t\t\torder.push([j, j + 1, array2.slice(), null]);\r\n\t\t\tj--;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (let i = 0; i < array2.length; i++) {\r\n\t\torder.push([null, null, null, i]);\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default insertionSort;\r\n","let order: any = [];\r\n\r\nconst halfArr = (array: number[], left: number, right: number): void => {\r\n\tif (left >= right) return;\r\n\r\n\tconst mid = Math.floor((left + right) / 2);\r\n\r\n\thalfArr(array, left, mid);\r\n\thalfArr(array, mid + 1, right);\r\n\r\n\tmerge(array, left, mid, right);\r\n};\r\n\r\nconst merge = (array: number[], left: number, mid: number, right: number): void => {\r\n\tlet i: number = left,\r\n\t\tj: number = mid + 1;\r\n\tlet newArr: number[] = [];\r\n\r\n\twhile (i <= mid && j <= right) {\r\n\t\torder.push([i, j, null, null]);\r\n\t\tif (array[i] >= array[j]) {\r\n\t\t\tnewArr.push(array[j++]);\r\n\t\t} else {\r\n\t\t\tnewArr.push(array[i++]);\r\n\t\t}\r\n\t}\r\n\r\n\twhile (i <= mid) {\r\n\t\torder.push([i, null, null, null]);\r\n\t\tnewArr.push(array[i++]);\r\n\t}\r\n\r\n\twhile (j <= right) {\r\n\t\torder.push([null, j, null, null]);\r\n\t\tnewArr.push(array[j++]);\r\n\t}\r\n\r\n\tfor (i = left; i <= right; i++) {\r\n\t\tarray[i] = newArr[i - left];\r\n\t\torder.push([i, null, array.slice(), null]);\r\n\t}\r\n};\r\n\r\nconst mergeSortAlgo = (array: number[]) => {\r\n\torder = [];\r\n\tconst newArr = array.slice();\r\n\r\n\thalfArr(newArr, 0, newArr.length - 1);\r\n\r\n\tfor (let i = 0; i < newArr.length; i++) {\r\n\t\torder.push([null, null, null, i]);\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default mergeSortAlgo;\r\n","let order: any[] = [];\r\n\r\nconst swap = (arr: number[], i: number, j: number): void => {\r\n\tconst temp: number = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst quickSort = (array: number[], first: number, last: number) => {\r\n\tif (first >= last) {\r\n\t\tif (first === last) order.push([null, null, null, first]);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst pivot: number = Math.floor(Math.random() * (last - first)) + first;\r\n\tswap(array, first, pivot);\r\n\torder.push([first, pivot, array.slice(), null]);\r\n\r\n\tconst pivoti: number = partition(array, first, last);\r\n\r\n\tquickSort(array, first, pivoti - 1);\r\n\tquickSort(array, pivoti + 1, last);\r\n\r\n\treturn;\r\n};\r\n\r\nconst partition = (array: number[], first: number, last: number): number => {\r\n\tlet pivotElem: number = first;\r\n\tlet i: number = first;\r\n\r\n\tfor (let j = first + 1; j <= last; j++) {\r\n\t\torder.push([j, pivotElem, null, null]);\r\n\t\tif (array[j] < array[pivotElem]) {\r\n\t\t\ti++;\r\n\t\t\tswap(array, j, i);\r\n\t\t\torder.push([j, i, array.slice(), null]);\r\n\t\t}\r\n\t}\r\n\r\n\tswap(array, pivotElem, i);\r\n\torder.push([pivotElem, i, array.slice(), null]);\r\n\torder.push([null, null, null, i]);\r\n\treturn i;\r\n};\r\n\r\nconst quickSortAlgo = (array: number[]): any[] => {\r\n\tconst newArray = array.slice();\r\n\torder = [];\r\n\r\n\tquickSort(newArray, 0, array.length - 1);\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default quickSortAlgo;\r\n","const swap = (arr: number[], i: number, j: number): void => {\r\n\tconst temp: number = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst selectionSort = (array: number[]): number[] => {\r\n\tconst array2: number[] = array.slice();\r\n\tconst order: any = [];\r\n\r\n\tfor (let i = 0; i < array2.length; i++) {\r\n\t\tfor (let j = i; j < array2.length; j++) {\r\n\t\t\torder.push([i, j, null, null]);\r\n\r\n\t\t\tif (array2[i] > array2[j]) {\r\n\t\t\t\tswap(array2, i, j);\r\n\t\t\t\torder.push([i, j, array2.slice(), null]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\torder.push([null, null, null, i]);\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default selectionSort;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"../src/styles/main.css\";\nimport bubbleSortOrder from \"./algos/bubbleSort\";\nimport insertionSort from \"./algos/insertionSort\";\nimport mergeSortAlgo from \"./algos/mergeSort\";\nimport quickSortAlgo from \"./algos/quickSort\";\nimport selectionSort from \"./algos/selectionSort\";\n\nfunction App() {\n\tconst [array, setArray] = useState<number[]>([]);\n\tconst [selectedAlgorithm, setSelectedAlgorithm] = useState(\"bubbleSort\");\n\tconst [length, setLength] = useState<number>(30);\n\tconst [sorting, setSorting] = useState<boolean>(false);\n\tconst [completed, setCompleted] = useState<boolean>(true);\n\tconst [speed, setSpeed] = useState<number>(250);\n\tconst [comparedEls, setComparedEls] = useState<number[]>([]);\n\tconst [swapEls, setSwapEls] = useState<number[]>([]);\n\tconst [sortedIndex, setSortedIndex] = useState<number[]>([]);\n\n\tfunction sleep(ms: number) {\n\t\tconsole.log(ms);\n\t\treturn new Promise((resolve) => setTimeout(resolve, ms));\n\t}\n\n\tconst genArray = () => {\n\t\tlet newArray: number[] = [];\n\t\tsetSortedIndex([]);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tnewArray = [...newArray, Math.floor(Math.random() * 500) + 10];\n\t\t}\n\n\t\treturn newArray;\n\t};\n\n\tconst changeAlgorithm = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\t\tsetSelectedAlgorithm(event.target.value);\n\t};\n\n\tconst handleSort = () => {\n\t\tconst sortArr = (order: any) => {\n\t\t\t(function loop(i) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tconst [j, k, arr, index] = order[i];\n\t\t\t\t\tsetComparedEls([j, k]);\n\t\t\t\t\tsetSwapEls([]);\n\n\t\t\t\t\tif (index !== null) {\n\t\t\t\t\t\tsetSortedIndex((prevState) => [...prevState, index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (arr) {\n\t\t\t\t\t\tsetArray(arr);\n\t\t\t\t\t\tif (j !== null || k != null) setSwapEls([j, k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (++i < order.length) {\n\t\t\t\t\t\tloop(i);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetSorting(false);\n\t\t\t\t\t\tsetCompleted(true);\n\t\t\t\t\t}\n\t\t\t\t}, speed);\n\t\t\t})(0);\n\t\t};\n\n\t\tsetSorting(true);\n\n\t\tselectedAlgorithm === \"bubbleSort\"\n\t\t\t? sortArr(bubbleSortOrder(array))\n\t\t\t: selectedAlgorithm === \"selectionSort\"\n\t\t\t? sortArr(selectionSort(array))\n\t\t\t: selectedAlgorithm === \"mergeSort\"\n\t\t\t? sortArr(mergeSortAlgo(array))\n\t\t\t: selectedAlgorithm === \"quickSort\"\n\t\t\t? sortArr(quickSortAlgo(array))\n\t\t\t: selectedAlgorithm === \"insertionSort\"\n\t\t\t? sortArr(insertionSort(array))\n\t\t\t: (() => {\n\t\t\t\t\tsetSorting(false);\n\t\t\t\t\tsetCompleted(true);\n\t\t\t  })();\n\t};\n\n\tuseEffect(() => setArray([...genArray()]), [length]);\n\tuseEffect(() => setArray([...genArray()]), []);\n\n\tconst changeLength = (event: React.ChangeEvent<HTMLInputElement>) =>\n\t\tsetLength(parseInt(event.target.value));\n\n\tconst changeSpeed = (event: React.ChangeEvent<HTMLInputElement>) =>\n\t\tsetSpeed(parseInt(event.target.value));\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"navbar\">\n\t\t\t\t{/* <form onSubmit={handleSort}>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<select value={selectedAlgorithm} onChange={changeAlgorithm}>\n\t\t\t\t\t\t\t<option value=\"bubbleSort\">Bubble Sort</option>\n\t\t\t\t\t\t\t<option value=\"selectionSort\">Selection Sort</option>\n\t\t\t\t\t\t\t<option value=\"mergeSort\">Merge Sort</option>\n\t\t\t\t\t\t\t<option value=\"quickSort\">Quick Sort</option>\n\t\t\t\t\t\t\t<option value=\"insertionSort\">Insertion Sort</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</label>\n\t\t\t\t\t<input type=\"submit\" value=\"Submit\" disabled={sorting} />\n\t\t\t\t</form> */}\n\t\t\t\t<div className=\"length\">\n\t\t\t\t\t<label htmlFor=\"length\">Change Length</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"10\"\n\t\t\t\t\t\tmax=\"150\"\n\t\t\t\t\t\tvalue={length}\n\t\t\t\t\t\tonChange={changeLength}\n\t\t\t\t\t\tid=\"length\"\n\t\t\t\t\t\tdisabled={sorting}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"speed\">\n\t\t\t\t\t<label htmlFor=\"speed\">Change Speed</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"speed\"\n\t\t\t\t\t\ttype=\"range\"\n\t\t\t\t\t\tmin=\"10\"\n\t\t\t\t\t\tmax=\"1000\"\n\t\t\t\t\t\tvalue={speed}\n\t\t\t\t\t\tonChange={changeSpeed}\n\t\t\t\t\t\tdisabled={sorting}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"select-cont\">\n\t\t\t\t\t<select value={selectedAlgorithm} onChange={changeAlgorithm}>\n\t\t\t\t\t\t<option value=\"bubbleSort\">Bubble Sort</option>\n\t\t\t\t\t\t<option value=\"selectionSort\">Selection Sort</option>\n\t\t\t\t\t\t<option value=\"mergeSort\">Merge Sort</option>\n\t\t\t\t\t\t<option value=\"quickSort\">Quick Sort</option>\n\t\t\t\t\t\t<option value=\"insertionSort\">Insertion Sort</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<button onClick={handleSort} disabled={sorting}>\n\t\t\t\t\tSORT!\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setArray([...genArray()])} disabled={sorting}>\n\t\t\t\t\tGenerate New Array\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className=\"array-container\">\n\t\t\t\t<div className=\"array-bar\">\n\t\t\t\t\t{array.map((block: number, i: number) => {\n\t\t\t\t\t\tconst height = (block * 10) / array.length;\n\t\t\t\t\t\tlet bg = \"turquoise\";\n\n\t\t\t\t\t\tif (comparedEls && (i === comparedEls[0] || i === comparedEls[1])) {\n\t\t\t\t\t\t\tbg = \"#ffff50\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (swapEls && (i === swapEls[0] || i === swapEls[1])) {\n\t\t\t\t\t\t\tbg = \"red\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sortedIndex && sortedIndex.includes(i)) {\n\t\t\t\t\t\t\tbg = \"#4bc52e\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst style = {\n\t\t\t\t\t\t\tbackgroundColor: bg,\n\t\t\t\t\t\t\tcolor: \"black\",\n\t\t\t\t\t\t\theight: `${block}px`,\n\t\t\t\t\t\t\twidth: \"6px\",\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn <div key={i} className=\"block\" style={style}></div>;\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}